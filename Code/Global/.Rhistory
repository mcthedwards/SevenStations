alpha[i, ] <- gibbs_signal_alpha(yf, Xf, times.f, q, tau[i], beta[i - 1])
alpha[2, ]
# b. slope (assumes N(beta.G, beta.var) prior)
beta[i] <- gibbs_signal_beta(yf, Xf, times.f, q, tau[i], alpha[i, ],
beta.G[i - 1], beta.var)
beta.var = 1e6
# b. slope (assumes N(beta.G, beta.var) prior)
beta[i] <- gibbs_signal_beta(yf, Xf, times.f, q, tau[i], alpha[i, ],
beta.G[i - 1], beta.var)
beta[2]
beta.var = 1
# b. slope (assumes N(beta.G, beta.var) prior)
beta[i] <- gibbs_signal_beta(yf, Xf, times.f, q, tau[i], alpha[i, ],
beta.G[i - 1], beta.var)
beta.var = 1e6
t(times.f)
variances <- tau * q * 2 * pi  # 2 * pi * f, i.e., diagonal variance matrix
variances <- tau[2] * q * 2 * pi  # 2 * pi * f, i.e., diagonal variance matrix
variances
invVar = 1 / variances
invVar
tD = t(times.f) %*% diag(invVar, length(times.f))
tD
tDt = sum(times.f ^ 2 * invVar)
tDt
1 / tDt
1 / tDt + 1 / beta.var
tDt = sum(times.f ^ 2 * invVar)
tDt
inv.sigma2 = tDt + 1 / beta.var
mu = (tD %*% (yf - Xf %*% alpha) + beta.G) * inv.sigma2
mu = (tD %*% (yf - Xf %*% alpha[2, ]) + beta.G) * inv.sigma2
str(Xf)
str(alpha[2, ])
str(tD)
invVar
tD
source("gibbs_sampler_with_signal.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1)
source("gibbs_sampler_with_signal.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1)
source("gibbs_sampler_with_signal.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1)
source("gibbs_sampler_with_signal.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$alpha)
source("gibbs_sampler_with_signal.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$alpha)
plot.ts(mcmc$beta)
plot.ts(mcmc$beta.G)
plot.ts(mcmc$alpha)
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$alpha)
Xf
times.f
plot.ts(times.f)
times
# Fourier transform time explanatory variable
times.f = fast_ft(times - mean(times))  # Mean centre times
plot.ts(times.f)
source("gibbs_sampler_with_signal.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$alpha)
plot.ts(mcmc$recon.mean)
plot.ts(mcmc$recon.median)
plot.ts(mcmc$recon.p95)
source("gibbs_sampler_with_signal.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
source("gibbs_sampler_with_signal.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$beta)
plot.ts(mcmc$alpha)
source("gibbs_signal.R")
source("gibbs_sampler_with_signal.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1)
warnings()
# Plot signal estimate
plot(mcmc, legend.loc = NA)
source("gibbs_signal.R")
source("gibbs_sampler_with_signal.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$alpha)
plot.ts(mcmc$beta)
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1,
beta.var = 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$beta)
plot.ts(mcmc$beta)
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1,
beta.var = 1,
sigma2.0 = 1)
warnings()
yf
Xf
alpha
alpha[1]
alpha[1,]
source("gibbs_signal.R")
source("gibbs_sampler_with_signal.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1,
beta.var = 1,
sigma2.0 = 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$beta)
plot.ts(mcmc$recon.median)
source("gibbs_signal.R")
source("gibbs_sampler_with_signal.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1,
beta.var = 1,
sigma2.0 = 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$beta)
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1,
beta.var = 1e6,
sigma2.0 = 1e6)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$beta)
plot.ts(mcmc$recon.median)
plot.ts(mcmc$alpha)
D
source("gibbs_signal.R")
source("gibbs_sampler_with_signal.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1,
beta.var = 1e6,
sigma2.0 = 1e6)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$beta)
plot.ts(mcmc$alpha)
source("gibbs_functions.R")
source("gibbs_noise.R")
source("gibbs_sampler_noise_only.R")
source("gibbs_signal.R")
source("gibbs_sampler_with_signal.R")
source("gibbs_global.R")
source("gibbs_signal.R")
source("gibbs_sampler_with_signal.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1)
# Read in Auckland temperature data
data = read.csv("annual_temp_2016.csv")
data = data[data$location=="Auckland", ]
times = data$year
temp = data$temp
# Change points
cp = c()
cp[1] = 1
for (i in 2:nrow(data)) {
cp[i] = (data$site_number[i] != data$site_number[i - 1])
}
cp = which(cp == 1)  # Auckland change points
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$beta)
plot.ts(mcmc$alpha)
source("gibbs_signal.R")
source("gibbs_sampler_with_signal.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$beta)
plot.ts(mcmc$alpha)
cp
changepoints = cp
# Define changepoints as where the new level starts
# changepoints = c(1, changepoints)
cpn = length(changepoints)
# Time domain design matrix
Xt = matrix(0, nrow = length(times), ncol = cpn)
for (j in 1:(cpn-1)) {
Xt[changepoints[j]:(changepoints[j+1]-1), j] = 1  # Indicators created to show which part of intercept to estimate
}
Xt[changepoints[cpn]:length(times), cpn] = 1  # Populating last segment with 1s
Xt.mean = apply(Xt, 2, mean)
matrix(1, ncol = 4, nrow = 6)
matrix(1, ncol = 4, nrow = 6) - Xt.mean
Xt.mean
Xt.mean = apply(Xt, 2, mean)
for (j in 1:cpn) {
Xt[, j] = Xt[, j] - Xt.mean[j]
}
apply(Xt, 2, mean)
# Frequency domain design matrix
Xf = matrix(NA, nrow = length(times), ncol = cpn)
for (j in 1:(cpn)) {
Xf[, j] = fast_ft(Xt[, j])
}
Xf
source("gibbs_signal.R")
source("gibbs_sampler_with_signal.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1)
plot.ts(Xf)
# Time domain design matrix
Xt = matrix(0, nrow = length(times), ncol = cpn)
for (j in 1:(cpn-1)) {
Xt[changepoints[j]:(changepoints[j+1]-1), j] = 1  # Indicators created to show which part of intercept to estimate
}
Xt[changepoints[cpn]:length(times), cpn] = 1  # Populating last segment with 1s
# Frequency domain design matrix
Xf = matrix(NA, nrow = length(times), ncol = cpn)
for (j in 1:(cpn)) {
Xf[, j] = fast_ft(Xt[, j])
}
# Fourier transform time explanatory variable
times = times - mean(times)  # Mean centre times (numerical stability)
plot.ts(Xf)
source("gibbs_signal.R")
source("gibbs_sampler_with_signal.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$beta)
plot.ts(mcmc$alpha)
plot.ts(mcmc$recon.median)
source("gibbs_signal.R")
source("gibbs_sampler_with_signal.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$beta)
plot.ts(mcmc$alpha)
plot.ts(mcmc$recon.median)
source("gibbs_signal.R")
source("gibbs_sampler_with_signal.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$beta)
plot.ts(mcmc$alpha)
source("gibbs_signal.R")
source("gibbs_sampler_with_signal.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1)
source("gibbs_signal.R")
source("gibbs_sampler_with_signal.R")
# Read in Auckland temperature data
data = read.csv("annual_temp_2016.csv")
data = data[data$location=="Auckland", ]
times = data$year
temp = data$temp
# Change points
cp = c()
cp[1] = 1
for (i in 2:nrow(data)) {
cp[i] = (data$site_number[i] != data$site_number[i - 1])
}
cp = which(cp == 1)  # Auckland change points
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$beta)
plot.ts(mcmc$alpha)
plot.ts(mcmc$recon.median)
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$beta)
plot.ts(mcmc$alpha)
source("gibbs_sampler_with_signal.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1)
source("gibbs_signal.R")
source("gibbs_sampler_with_signal.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$beta)
plot.ts(mcmc$alpha)
plot.ts(mcmc$recon.median)
source("gibbs_signal.R")
source("gibbs_sampler_with_signal.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$beta)
plot.ts(mcmc$alpha)
source("gibbs_signal.R")
source("gibbs_sampler_with_signal.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$beta)
plot.ts(mcmc$alpha)
source("gibbs_signal.R")
source("gibbs_sampler_with_signal.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$beta)
plot.ts(mcmc$alpha)
plot.ts(mcmc$recon.median)
source("gibbs_signal.R")
source("gibbs_sampler_with_signal.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
10000, 5000, 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$beta)
plot.ts(mcmc$alpha)
plot.ts(mcmc$recon.median)
# Time domain design matrix
Xt = matrix(0, nrow = length(times), ncol = cpn)
for (j in 1:(cpn-1)) {
Xt[changepoints[j]:(changepoints[j+1]-1), j] = 1  # Indicators created to show which part of intercept to estimate
}
Xt[changepoints[cpn]:length(times), cpn] = 1  # Populating last segment with 1s
times = data$year
temp = data$temp
temp
lm.fit = lm(temp ~ cbind(Xt, times) - 1)
summary(lm.fit)
quantile(mcmc$beta, probs = c(0.05, 0.95))
mean(mcmc$beta)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
20000, 10000, 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$beta)
plot.ts(mcmc$alpha)
plot.ts(mcmc$recon.median)
summary(lm.fit)
mean(mcmc$beta)
source("gibbs_signal.R")
source("gibbs_sampler_with_signal.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
20000, 10000, 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$beta)
plot.ts(mcmc$alpha)
plot.ts(mcmc$recon.median)
mean(mcmc$beta)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
source("gibbs_functions.R")
source("gibbs_noise.R")
source("gibbs_sampler_noise_only.R")
source("gibbs_signal.R")
source("gibbs_sampler_with_signal.R")
source("gibbs_global.R")
# Read in Auckland temperature data
data = read.csv("annual_temp_2016.csv")
data = data[data$location=="Auckland", ]
times = data$year
temp = data$temp
# Change points
cp = c()
cp[1] = 1
for (i in 2:nrow(data)) {
cp[i] = (data$site_number[i] != data$site_number[i - 1])
}
cp = which(cp == 1)  # Auckland change points
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
20000, 10000, 1)
source("gibbs_signal.R")
source("gibbs_sampler_with_signal.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
20000, 10000, 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$beta)
plot.ts(mcmc$alpha)
plot.ts(mcmc$recon.median)
cpn = length(changepoints)
# Time domain design matrix
Xt = matrix(0, nrow = length(times), ncol = cpn)
for (j in 1:(cpn-1)) {
Xt[changepoints[j]:(changepoints[j+1]-1), j] = 1  # Indicators created to show which part of intercept to estimate
}
Xt[changepoints[cpn]:length(times), cpn] = 1  # Populating last segment with 1s
quantile(mcmc$beta, probs = c(0.05, 0.95))
mean(mcmc$beta)
plot.ts(mcmc$beta.G)
source("gibbs_signal.R")
source("gibbs_sampler_with_signal.R")
source("gibbs_global.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
20000, 10000, 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$beta)
quantile(mcmc$beta, probs = c(0.05, 0.95))
mean(mcmc$beta)
plot.ts(mcmc$beta.G)
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
20000, 10000, 1,
sigma2.0 = 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$beta)
plot.ts(mcmc$beta.G)
plot.ts(mcmc$alpha)
quantile(mcmc$beta, probs = c(0.05, 0.95))
mean(mcmc$beta)
source("gibbs_signal.R")
source("gibbs_sampler_with_signal.R")
source("gibbs_global.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
20000, 10000, 1,
sigma2.0 = 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$beta)
plot.ts(mcmc$beta.G)
plot.ts(mcmc$alpha)
quantile(mcmc$beta, probs = c(0.05, 0.95))
mean(mcmc$beta)
source("gibbs_sampler_noise_only.R")
source("gibbs_signal.R")
source("gibbs_sampler_with_signal.R")
source("gibbs_global.R")
# Run MCMC
mcmc = gibbs_temperature(temp, times, cp,
20000, 10000, 1)
# Plot signal estimate
plot(mcmc, legend.loc = NA)
plot.ts(mcmc$beta)
plot.ts(mcmc$beta.G)
plot.ts(mcmc$alpha)
quantile(mcmc$beta, probs = c(0.05, 0.95))
mean(mcmc$beta)
